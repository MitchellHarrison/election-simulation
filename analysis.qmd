---
execute: 
  message: false
  warning: false
---

```{r}
#| label: import-libs-and-colors
library(tidyverse)
library(RSQLite)
library(gridExtra)
library(tidymodels)

RED <- "#DE0100"
BLUE <- "#0015BC"
party_color <- list("red" = RED, "blue" = BLUE)
```


```{r}
#| label: load-data-from-db

db <- dbConnect(SQLite(), dbname = "simulation.db")
agent_query <- "SELECT * FROM agents;"
election_query <- "SELECT * FROM elections;"
agent_df <- dbGetQuery(db, agent_query)
election_df <- dbGetQuery(db, election_query)
dbDisconnect(db)

agents <- as_tibble(agent_df)
elections <- as_tibble(election_df)
POP <- nrow(filter(agents, model_iteration == 1))
```

# Visualizations

### Median voter age over time
```{r}
# median age over time
age <- agents |>
  group_by(model_iteration) |>
  summarise(median_age = median(age)) |>
  ggplot(aes(x = model_iteration, y = median_age)) +
  geom_line() +
  labs(
    title = "Median Age Over Time",
    x = "Model iteration",
    y = "Median age"
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed")
  )
age
```

### Median turnout likelihood by party
```{r}
#| label: median-turnout-by-party
turnout <- agents |>
  group_by(model_iteration, color) |>
  summarise(median_turnout_mu = median(turnout_mu)) |>
  ggplot(aes(x = model_iteration, y = median_turnout_mu)) +
  geom_line(aes(color = color)) +
  scale_color_manual(values = c("red" = RED, "blue" = BLUE)) +
  labs(
    title = "Mean Turnout Likelihood Over Time",
    x = "Model iteration",
    y = "Median turnout mean"
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed"),
    legend.position = "none"
  )
turnout
```


### Total votes per election
```{r}
#| label: vote-count-per-election
n_iters <- max(agents$model_iteration)
votes <- elections |>
  mutate(total_vote = red_count + blue_count) |>
  ggplot(aes(x = model_iteration, y = total_vote)) +
  geom_line() +
  geom_point(aes(x = model_iteration, y = total_vote, color = winner)) +
  scale_color_manual(values = party_color) +
  xlim(0, n_iters) +
  labs(
    title = "Total Votes Over Time",
    x = "Model iteration",
    y = "Total votes"
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed"),
    legend.position = "top"
  )
votes
```

### Median political score over time
```{r}
#| label: median-political-stance-over-time
politics <- agents |>
  group_by(model_iteration, color) |>
  summarise(median_politics = median(politics_score)) |>
  ggplot(aes(x = model_iteration, y = median_politics)) +
  geom_line(aes(color = color)) +
  scale_color_manual(values = c("red" = RED, "blue" = BLUE)) +
  labs(
    title = "Median Population Politics Over Time",
    x = "Model iteration",
    y = "Median political score"
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed"),
    legend.position = "none"
  )
politics
```

### Party distribution over time
```{r}
#| label: party-distribution-over-time
party <- agents |>
  group_by(model_iteration, color) |>
  summarise(count = n()) |>
  group_by(model_iteration) |>
  mutate(pct = (count / sum(count)) * 100) |>
  ggplot(aes(x = model_iteration, y = pct, fill = color)) +
  geom_area(color = "black", alpha = 0.4) +
  scale_fill_manual(values = party_color) +
  labs(
    title = "Party Distribution Over Time",
    x = "Model iteration",
    y = element_blank()
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed"),
    legend.position = "none"
  )
party
```

### Median voter politics over time
*Note: this is different than the population politics. This only includes those*
*that turned out to vote*
```{r}
#| label: median-voter-politics-over-time
voters <- agents |>
  filter(voted == 1) |>
  group_by(model_iteration, color) |>
  summarise(median_politics = median(politics_score)) |>
  ggplot(aes(x = model_iteration, y = median_politics)) +
  geom_line(aes(color = color)) +
  geom_point(aes(color = color)) +
  scale_color_manual(values = c("red" = RED, "blue" = BLUE)) +
  labs(
    title = "Median Voter Politics Over Time",
    x = "Model iteration",
    y = "Median political score"
  ) +
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed"),
    legend.position = "none"
  )
voters
```

### Combined visualizations
```{r}
#| label: visualization-grid
gage <- ggplotGrob(age)
gturnout <- ggplotGrob(turnout)
gvotes <- ggplotGrob(votes)
gpolitics <- ggplotGrob(politics)
gparty <- ggplotGrob(party)
gvoters <- ggplotGrob(voters)

grobs = list(gage, gturnout, gvotes, gpolitics, gparty, gvoters)
  
# display graphs in a grid
grid.arrange(grobs = grobs, ncols = 2)
```

### Partisanship between voters and non-voters
```{r}
agents |>
  filter(election_year == 1) |>
  mutate(voted = as_factor(voted)) |>
  ggplot(aes(x = politics_score)) +
  geom_density(aes(fill = voted), color = "black", alpha = 0.5) +
  scale_fill_manual(
    name = element_blank(),
    labels = c("Voted", "Did not vote"),
    breaks = c(1, 0),
    values = c("red", "black")
  ) +
  xlim(-2, 2) +
  labs(
    x = "Politics score", 
    y = "Density", 
    title = "Partisans Turn Out the Vote",
    subtitle = "Political scores of voters vs. non-voters"
  )+
  theme_test() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dashed")
  )
```

### Start/end political distribution
```{r}
agents |>
  filter(model_iteration %in% c(1, max(model_iteration))) |>
  mutate(model_iteration = factor(model_iteration)) |>
  ggplot(aes(fill = model_iteration, x = politics_score)) +
  geom_density(alpha = 0.5) +
  labs(y = "Model Iteration", x = "Politics Score",
       title = "A Divided People", fill = "Model iteration",
       subtitle = "Starting and final distribution of politics scores") +
  theme_test() +
  theme(legend.positio = c(.15,.8))
```


## Modelling 

```{r}
spec <- linear_reg() |>
  set_engine("lm") |>
  set_mode("regression")

model_data <- agents |>
  filter(election_year == 1)

# TODO fit model
```

